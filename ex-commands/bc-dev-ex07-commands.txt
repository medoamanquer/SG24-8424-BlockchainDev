=================
Section 7.3.1
=================


docker ps --format 'table {{.Names}} \t {{.Status}}'

**** NOTE ****
cd ~/fabric-tools
./stopFabric.sh
./teardownFabric.sh

cd ~/Blockchain_Redbook_Application/Fabric/Exercise7

./startFabric.sh
**************

cd ~/Blockchain_Redbook_Application/Fabric/Exercise7/Front-End/Vehicle-app

node registerAdmin.js

node registerUser.js


=================
Section 7.3.2
=================

npm start

cd ~/Blockchain_Redbook_Application/Fabric/Exercise7/Front-End/Angular2/

npm start

localhost:4200


=================
Section 7.3.3
=================

cd ~/Blockchain_Redbook_Application/Fabric/Exercise7/Front-End/Vehicle-app 

code controller.js

----
changeOwner: function(req, res){
       // add the following steps here
      }

-------
//Set up connection to Fabric
console.log("changing Owner");
var array = req.params.holder.split("-");
var key = array[0]
var holder = array[1];
var fabric_client = new Fabric_Client();
var channel = fabric_client.newChannel('mychannel');
var peer =  fabric_client.newPeer('grpc://localhost:7051');
channel.addPeer(peer);
var order = fabric_client.newOrderer('grpc://localhost:7050')
channel.addOrderer(order);
var member_user = null;
var store_path = path.join(os.homedir(), '.hfc-key-store');
console.log('Store path:'+store_path);
var tx_id = null;


-----------
// Set up the client object with state and crypto store 
Fabric_Client.newDefaultKeyValueStore({ path: store_path
}).then((state_store) => {
fabric_client.setStateStore(state_store);
var crypto_suite = Fabric_Client.newCryptoSuite();
var crypto_store = Fabric_Client.newCryptoKeyStore({path: store_path});
crypto_suite.setCryptoKeyStore(crypto_store);
fabric_client.setCryptoSuite(crypto_suite);

-------
//Get user1
return fabric_client.getUserContext('user1', true);
}).then((user_from_store) => {
if (user_from_store && user_from_store.isEnrolled()) {
console.log('Successfully loaded user1 from persistence');
member_user = user_from_store;
} else {
throw new Error('Failed to get user1.... run registerUser.js');
}

-----------
//Generate transaction ID
tx_id = fabric_client.newTransactionID();

----------
//Create request for proposal 
var request = {
chaincodeId: chainCodeName,
fcn: 'changeVehicleOwner',
args: [key, holder],
chainId: channelName,
txId: tx_id
};

-----------
//Send transaction proposal to peers for validation
return channel.sendTransactionProposal(request);
}).then((results) => {
var proposalResponses = results[0];
var proposal = results[1];
let isProposalGood = false;
if (proposalResponses && proposalResponses[0].response &&
proposalResponses[0].response.status === 200) {
isProposalGood = true;
console.log('Transaction proposal was good');
} else {
console.error('Transaction proposal was bad');
}
if (isProposalGood) {
console.log(util.format(
'Successfully sent Proposal and received ProposalResponse: Status - %s, message - "%s"',
proposalResponses[0].response.status, proposalResponses[0].response.message));


------------------------
//Build request for orderer
var request = {
proposalResponses: proposalResponses,
proposal: proposal
};
 
----------
//Set a transaction listener
var transaction_id_string = tx_id.getTransactionID(); //Get the transaction ID string to be used by the event processing
var promises = [];
var sendPromise = channel.sendTransaction(request);
promises.push(sendPromise); //we want the send transaction first, so that we know where to check status

// get an eventhub once the fabric client has a user assigned. The useris required bacause the event registration must be signed
let event_hub = fabric_client.newEventHub();
event_hub.setPeerAddr('grpc://localhost:7053');
// using resolve the promise so that result status may be processed under the then clause rather than having the catch clause process the status
let txPromise = new Promise((resolve, reject) => {
let handle = setTimeout(() => {
event_hub.disconnect();
resolve({event_status : 'TIMEOUT'}); //we could use reject(new Error('Trnasaction did not complete within 30 seconds'));
}, 3000);
event_hub.connect();
event_hub.registerTxEvent(transaction_id_string, (tx, code) => {
clearTimeout(handle);
event_hub.unregisterTxEvent(transaction_id_string);
event_hub.disconnect(); 


----------------
//Report results and receive notification reporting commited or rejected transaction
var return_status = {event_status : code, tx_id : transaction_id_string};
if (code !== 'VALID') {
console.error('The transaction was invalid, code = ' + code);
resolve(return_status); // we could use reject(new Error('Problem with the tranaction, event status ::'+code));
} else {
console.log('The transaction has been committed on peer ' + event_hub._ep._endpoint.addr);
resolve(return_status);
}
}, (err) => {
//this is the callback if something goes wrong with the event registration or processing
reject(new Error('There was a problem with the eventhub ::'+err));
});
});
promises.push(txPromise);
return Promise.all(promises);
} else {
console.error('Failed to send Proposal or receive valid response. Response null or status is not 200. exiting...');
res.send("Could not find Vehicle");
// throw new Error('Failed to send Proposal or receive valid response. Response null or status is not 200. exiting...');
}
}).then((results) => {
console.log('Send transaction promise and event listener promise have completed');
// check the results in the order the promises were added to the promise all list
if (results && results[0] && results[0].status === 'SUCCESS') {
console.log('Successfully sent transaction to the orderer.');
} else {
console.error('Failed to order the transaction. Error code: ' + response.status);
res.send("Could not find vehicle");
}
if(results && results[1] && results[1].event_status === 'VALID') {
console.log('Successfully committed the change to the ledger by the peer');
res.json(tx_id.getTransactionID())
} else {
console.log('Transaction failed to be committed to the ledger due to ::'+results[1].event_status);
}
}).catch((err) => {
});


=================
Section 7.3.4
=================

cd ~/Blockchain_Redbook_Application/Fabric/Exercise7/Front-End/Angular2/src/app/

code app.component.html

2.	Uncomment line 4 by removing <!-- from the beginning and - -> from the end of the 


=================
Section 7.3.5
=================

docker rm -f $(docker ps -aq)

docker system prune -f

docker volume rm $(docker volume ls -q)

docker rm $(docker ps -aq)

cd ~

rm -rf .hfc-key-store/



